// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator graphql {
  provider = "typegraphql-prisma"
  output   = "./generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STUDENT
}

enum TypeDoc {
  BULETIN_FRONT
  BULETIN_BACK
  CONFIRM_STUDY
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String   
  role        UserRole @default(STUDENT)
  FirstName   String @default("Unknown")
  lastName    String @default("Unknown")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Camera      Camera?    @relation(fields: [cameraId], references: [id])
  cameraId    Int?
  interests   Interest[] @relation("UserInterests")
  preferences RoommatePreference?
  points      LoyaltyPoints?
  ratings     ComfortRating[]
  bookings    Booking[]
  document   Document[]
  notifications Notification[]
  files       File[]
  requests CaminRequest[]
  
  // documents Documents[]
}



model Interest {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  category String?
  users    User[]  @relation("UserInterests")
}

model Camin {
  id          Int     @id @default(autoincrement())
  description String?
  adress      String?
  name        String? @unique
  capacity    Int @default(0)

  cameri Camera[]
}

model Camera {
  id           Int     @id @default(autoincrement())
  cameraNumber      String? @unique

  students User[]
  Camin    Camin? @relation(fields: [caminId], references: [id])
  caminId  Int?
  ratings  ComfortRating[]
  bookings Booking[]
  capacity Int @default(0)
}

model News{
  id           Int @id @default(autoincrement())
  title        String
  description  String @db.Text
  imageUrl     String
  date         DateTime @default(now())
}

model RoommatePreference {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  cleanliness Int     // Scor curățenie (1-10)
  quietness   Int     // Scor liniște (1-10)
  lifestyle   String? // Ex.: Nocturn, Matinal
  User        User    @relation(fields: [userId], references: [id])
}

model LoyaltyPoints {
  id      Int @id @default(autoincrement())
  userId  Int @unique
  points  Int @default(0)
  User    User @relation(fields: [userId], references: [id])
}


model ComfortRating {
  id          Int      @id @default(autoincrement())
  userId      Int
  cameraId    Int
  cleanliness Int     // Curatenie (1-5)
  noiseLevel  Int      // Nivel zgomot (1-5)
  comfort     Int      // Confort general (1-5)
  User        User     @relation(fields: [userId], references: [id])
  Camera      Camera   @relation(fields: [cameraId], references: [id])
}

model Booking {
  id         Int      @id @default(autoincrement())
  userId     Int
  cameraId   Int
  startDate  DateTime
  endDate    DateTime
  User       User     @relation(fields: [userId], references: [id])
  Camera     Camera   @relation(fields: [cameraId], references: [id])
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

model Document {
  id Int @id @default(autoincrement())
  tip String //Cerere, raport sau alta
  studentId Int
  status DocumentStatus
  fileUrl String
  dataDepunere DateTime
  dataAprobarii DateTime?
  User User @relation(fields: [studentId], references: [id])
}

model Notification {
  id Int @id @default(autoincrement())
  title String
  message String @db.Text
  userId Int
  status Boolean @default(false) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
}

model File {
  id        Int      @id @default(autoincrement())
  filename  String
  mimetype  String
  url       String
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}


model CaminRequest {
  id                      Int     @id @default(autoincrement())
  aplicantName           String
  applicantFirstName     String
  applicantEmail         String
  applicantPhone         String
  applicantAddress       String
  applicantCity          String
  applicantState         String
  applicantUniversity    String
  applicantDormitoryPreference String
  buletinFrontUrl        String
  buletinBackUrl         String
  confirmareStudiiUrl    String
  createdAt              DateTime @default(now())
  userId Int
  user User? @relation(fields: [userId], references: [id])
  // documents Documents[]
}





// model Documents {
//   id Int @id @default(autoincrement())
//   typeDoc TypeDoc 
//   url String
//   caminRequestId Int?
//   caminRequest CaminRequest? @relation(fields: [caminRequestId], references: [id])
//   userId Int?
//   user User? @relation(fields: [userId], references: [id])
// }
